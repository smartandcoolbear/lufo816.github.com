---
author: lufo
comments: true
date: 2013-12-10 15:08:24+00:00
layout: post
slug: 1342-%e5%bc%80%e5%bf%83%e7%9a%84%e9%87%91%e6%98%8e-01%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98
title: 1342. 开心的金明 01背包问题
wordpress_id: 123
tags:
- 编程
---

<blockquote>

> 
> # Constraints
> 
> 
Time Limit: 1 secs, Memory Limit: 32 MB

> 
> # Description
> 
> 


金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。

设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，……，jk，则所求的总和为：

 v[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号）

 请你帮助金明设计一个满足要求的购物单。





> 
> # Input
> 
> 


输入包含多个测试数据。

每个测试数据的第1行，为两个正整数，用一个空格隔开：

 N  m

 （其中N（<30000）表示总钱数，m（<25）为希望购买物品的个数。）

 从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数

 v  p

 （其中v表示该物品的价格(v<=10000)，p表示该物品的重要度(1~5)）











> 
> # Output
> 
> 


对于每个测试数据输出一行，其中只含有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（<100000000）。



> 
> # Sample Input
> 
> 

>     
>     1000 5
>     800 2
>     400 5
>     300 5
>     400 3
>     200 2
>     1000 5
>     800 2
>     400 5
>     300 5
>     400 3
>     200 2
> 
> 

> 
> # Sample Output
> 
> 

>     
>     3900
>     3900
> 
> 
</blockquote>


本题是01背包问题，思路为依次输入商品，输入第j个商品时，若买则为此时的金钱i减去商品的价格v后剩余金钱能买到的最大权值加上第j商品权值，否则为输入第j商品前的最大权值。

背包完全问题与之类似，把所有商品信息储存起来，每次金钱加一，与每个商品逐一比较，若买则为此时的金钱i减去商品的价格v后剩余金钱能买到的最大权值加上第j商品权值，不买则为金钱为i-1时的最大权值。

代码如下：

[cpp]

#include <iostream>
#include <cstring>
using namespace std;

int main() {
 int n, m, v, p, i, j;
 int max[30001];
 while (cin >> n >> m) {
 memset(max, 0, sizeof(max));
 for (j = 0; j < m; j++) {
 cin >> v >> p;
 for (i = n; i >= 1; i--) {
 if (v <= i && max[i - v] + v * p > max[i]) {
 max[i] = max[i - v] + v * p;
 }
 }
 }
 cout << max[n] << endl;
 }
 return 0;
}

[/cpp]
